import random
import logging
from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ParseMode

API_TOKEN = "7635553359:AAHKlFZ7h0F6CDuj676jpBhS6v_hLgJseOc"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

players = []
game_started = False
votes = {}
voted_users = set()
situation = ""
revealed = {}

# –î–∞–Ω—ñ
professions = ["–•—ñ—Ä—É—Ä–≥", "–Ü–Ω–∂–µ–Ω–µ—Ä", "–ü—Å–∏—Ö–æ–ª–æ–≥", "–§–µ—Ä–º–µ—Ä", "–°–æ–ª–¥–∞—Ç", "–ü—ñ–ª–æ—Ç", "–ö—É—Ö–∞—Ä"]
health = ["–ó–¥–æ—Ä–æ–≤–∏–π", "–ê—Å—Ç–º–∞", "–†–∞–∫ 1 —Å—Ç–∞–¥—ñ—ó", "–°–ª—ñ–ø–∏–π", "–Ü–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å", "–ì–ª—É—Ö–∏–π"]
hobbies = ["–ô–æ–≥–∞", "–ö—É–ª—ñ–Ω–∞—Ä—ñ—è", "–ú–∞–ª—é–≤–∞–Ω–Ω—è", "–ü–ª–∞–≤–∞–Ω–Ω—è"]
items = ["–ê–ø—Ç–µ—á–∫–∞", "–õ–æ–ø–∞—Ç–∞", "–ù—ñ–∂", "–á–∂–∞ –Ω–∞ 7 –¥–Ω—ñ–≤"]
facts = ["–ó–Ω–∞—î –º–æ–≤–∏", "–ú–∞—î –≤–æ–¥—ñ–π—Å—å–∫–µ", "–í–∏–∂–∏–≤ –≤ –∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ—ñ"]
situations = ["–ó–æ–º–±—ñ-–∞–ø–æ–∫–∞–ª—ñ–ø—Å–∏—Å", "–Ø–¥–µ—Ä–Ω–∞ –≤—ñ–π–Ω–∞", "–í–∏–≤–µ—Ä–∂–µ–Ω–Ω—è —Å—É–ø–µ—Ä–≤—É–ª–∫–∞–Ω—É"]

def generate_card():
    return {
        "–ø—Ä–æ—Ñ–µ—Å—ñ—è": random.choice(professions),
        "–≤—ñ–∫": random.randint(18, 65),
        "–∑–¥–æ—Ä–æ–≤ º—è": random.choice(health),
        "—Ö–æ–±—ñ": random.choice(hobbies),
        "–ø—Ä–µ–¥–º–µ—Ç": random.choice(items),
        "—Ñ–∞–∫—Ç": random.choice(facts)
    }

@dp.message_handler(commands=["start"])
async def start_cmd(message: types.Message):
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –ì—Ä–∞ '–ë—É–Ω–∫–µ—Ä'.\n/join ‚Äî –ø—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è\n/startgame ‚Äî –ø–æ—á–∞—Ç–∏ –≥—Ä—É")

@dp.message_handler(commands=["join"])
async def join_game(message: types.Message):
    global game_started
    if game_started:
        await message.reply("–ì—Ä—É –≤–∂–µ —Ä–æ–∑–ø–æ—á–∞—Ç–æ.")
        return
    for p in players:
        if p["id"] == message.from_user.id:
            await message.reply("–¢–∏ –≤–∂–µ –≤ –≥—Ä—ñ.")
            return
    card = generate_card()
    players.append({"id": message.from_user.id, "name": message.from_user.full_name, "card": card})
    revealed[message.from_user.id] = []
    await bot.send_message(
        message.from_user.id,
        f"üÉè –¢–≤–æ—è –∫–∞—Ä—Ç–∫–∞:\n"
        f"–ü—Ä–æ—Ñ–µ—Å—ñ—è: {card['–ø—Ä–æ—Ñ–µ—Å—ñ—è']}\n"
        f"–í—ñ–∫: {card['–≤—ñ–∫']}\n"
        f"–ó–¥–æ—Ä–æ–≤ º—è: {card['–∑–¥–æ—Ä–æ–≤ º—è']}\n"
        f"–•–æ–±—ñ: {card['—Ö–æ–±—ñ']}\n"
        f"–ü—Ä–µ–¥–º–µ—Ç: {card['–ø—Ä–µ–¥–º–µ—Ç']}\n"
        f"–§–∞–∫—Ç: {card['—Ñ–∞–∫—Ç']}"
    )
    await message.answer(f"{message.from_user.full_name} –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è –¥–æ –≥—Ä–∏!")

@dp.message_handler(commands=["startgame"])
async def start_game(message: types.Message):
    global game_started, situation
    if game_started or len(players) < 3:
        await message.answer("–ì—Ä–∞ –≤–∂–µ –π–¥–µ –∞–±–æ –∑–∞–º–∞–ª–æ –≥—Ä–∞–≤—Ü—ñ–≤ (–º—ñ–Ω. 3).")
        return
    game_started = True
    situation = random.choice(situations)
    await message.answer(f"üÜò –°–∏—Ç—É–∞—Ü—ñ—è: {situation}")
    text = "\n".join([f"{p['name']} ‚Äî {p['card']['–ø—Ä–æ—Ñ–µ—Å—ñ—è']}" for p in players])
    await message.answer("üßæ –ü—Ä–æ—Ñ–µ—Å—ñ—ó –≥—Ä–∞–≤—Ü—ñ–≤:\n" + text)

@dp.message_handler(commands=["status"])
async def status(message: types.Message):
    if not game_started:
        await message.answer("–ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å.")
        return
    text = "üë• –ì—Ä–∞–≤—Ü—ñ —É –≥—Ä—ñ:\n" + "\n".join([p["name"] for p in players])
    await message.answer(text)

@dp.message_handler(commands=["reveal"])
async def reveal(message: types.Message):
    if not game_started:
        await message.answer("–ì—Ä–∞ —â–µ –Ω–µ –ø–æ—á–∞–ª–∞—Å—å.")
        return
    player = next((p for p in players if p["id"] == message.from_user.id), None)
    if not player:
        await message.answer("–¢–µ–±–µ –Ω–µ–º–∞ –≤ –≥—Ä—ñ.")
        return
    available = [k for k in player["card"] if k not in revealed[message.from_user.id] and k != "–ø—Ä–æ—Ñ–µ—Å—ñ—è"]
    if not available:
        await message.answer("–¢–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–≤ —É—Å—ñ —á–∞—Å—Ç–∏–Ω–∏ –∫–∞—Ä—Ç–∫–∏.")
        return
    key = random.choice(available)
    value = player["card"][key]
    revealed[message.from_user.id].append(key)
    await message.answer(f"üì¢ {message.from_user.full_name} –≤—ñ–¥–∫—Ä–∏–≤(–ª–∞): {key.capitalize()} ‚Äî {value}")

@dp.message_handler(commands=["vote"])
async def vote(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–í—ñ–¥–ø–æ–≤—ñ–¥–∞–π –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≥—Ä–∞–≤—Ü—è.")
        return
    voter = message.from_user.id
    target = message.reply_to_message.from_user.id
    if voter == target:
        await message.reply("–ù–µ –º–æ–∂–Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏ –∑–∞ —Å–µ–±–µ.")
        return
    if voter in voted_users:
        await message.reply("–¢–∏ –≤–∂–µ –≥–æ–ª–æ—Å—É–≤–∞–≤.")
        return
    voted_users.add(voter)
    votes[target] = votes.get(target, 0) + 1
    await message.reply("–ì–æ–ª–æ—Å –∑–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ.")

    if len(voted_users) >= len(players):
        eliminated_id = max(votes, key=votes.get)
        eliminated_player = next((p for p in players if p["id"] == eliminated_id), None)
        if eliminated_player:
            players.remove(eliminated_player)
            await message.answer(f"‚ùå {eliminated_player['name']} –≤–∏–≥–Ω–∞–Ω–æ –∑ –±—É–Ω–∫–µ—Ä–∞!")

        voted_users.clear()
        votes.clear()

        if len(players) == 2:
            names = [p["name"] for p in players]
            await message.answer(f"üéâ –ü–µ—Ä–µ–º–æ–∂—Ü—ñ: {names[0]} —ñ {names[1]}")
            players.clear()
            global game_started
            game_started = False

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
